import React, {PureComponent} from 'react';
import {
  FlatList,
  KeyboardAvoidingView,
  Platform,
  Text,
  View,
} from 'react-native';
import Api, {Question} from '../../../../services/api';
import {getNextQuestion, validateResponse} from './selector';
import uuid from 'react-uuid';
import ContactModal from '../../Components/ContactModal';
import Header from '../../Components/Header';
import Footer from '../../Components/Footer';
import styles from './styles';

interface Props {}

interface State {
  questions: Question[];
  currentQuestion: Question | undefined;
  currentResponse: string;
  currentMessages: Message[];
  invalidAttempts: number;
  showHelpModal: boolean;
}

interface Message {
  value: string;
  autoGenerated: boolean;
}

const GREETING = 'Hi there! Hope you are doing well! Lets get Started.';

export class ChatBot extends PureComponent<Props, State> {
  constructor(props: Props) {
    super(props);
    this.onResponseSent = this.onResponseSent.bind(this);
    this.renderMessageItem = this.renderMessageItem.bind(this);
    this.renderAskForHelpModal = this.renderAskForHelpModal.bind(this);
    this.onModalBack = this.onModalBack.bind(this);
    this.onInputChange = this.onInputChange.bind(this);
    this.state = {
      questions: [],
      currentQuestion: undefined,
      currentMessages: [],
      currentResponse: '',
      invalidAttempts: 0,
      showHelpModal: false,
    };
  }

  async componentDidMount() {
    const resp = await Api.questions();
    const firstQuestion = resp.data.find((item) => item.id === 1);
    const initialMessage: Message = {
      value: firstQuestion?.question || '',
      autoGenerated: true,
    };
    this.setState({
      questions: resp.data,
      currentQuestion: firstQuestion,
      currentMessages: [
        initialMessage,
        {
          value: GREETING,
          autoGenerated: true,
        },
      ],
    });
  }

  onModalBack() {
    this.setState({
      invalidAttempts: 0,
      currentResponse: '',
    });
  }

  onInputChange(query: string) {
    this.setState({
      currentResponse: query,
    });
  }

  onResponseSent() {
    const {currentQuestion, invalidAttempts: invalidAttemps} = this.state;
    if (currentQuestion) {
      const nextQuestionId = validateResponse(
        currentQuestion,
        this.state.currentResponse.toLowerCase(),
      );
      if (nextQuestionId) {
        const {currentMessages} = this.state;
        const newMessages = [...currentMessages];
        const nextQuestion = getNextQuestion(
          this.state.questions,
          nextQuestionId,
        );
        newMessages.unshift(
          {
            value: nextQuestion?.question || '',
            autoGenerated: true,
          },
          {
            value: this.state.currentResponse,
            autoGenerated: false,
          },
        );
        this.setState({
          currentMessages: newMessages,
          currentQuestion: nextQuestion,
          currentResponse: '',
          invalidAttempts: 0,
        });
      } else {
        this.setState({
          invalidAttempts: invalidAttemps + 1,
        });
      }
    }
  }

  questionIdExtractor() {
    return uuid();
  }

  renderMessageItem({item}: {item: Message}) {
    const recepientText = item.autoGenerated ? 'black' : '#4F92FD';
    return (
      <View style={styles.messageItem}>
        <Text
          style={[
            styles.messageText,
            {
              color: recepientText,
            },
          ]}>
          {item.autoGenerated ? 'Marianne:' : 'You:'}
        </Text>
        <Text style={styles.messageContentText} key={uuid()}>
          {item.value || 'Error Occured'}
        </Text>
      </View>
    );
  }

  renderAskForHelpModal() {
    const {invalidAttempts} = this.state;
    return (
      <ContactModal onBack={this.onModalBack} visible={invalidAttempts >= 3} />
    );
  }

  renderTryAgain() {
    return <Text style={styles.tryAgainMessage}>Please try again</Text>;
  }

  renderMessages() {
    const {currentQuestion} = this.state;
    const bottomMargin = currentQuestion?.paths ? 0 : 40;
    return (
      <FlatList
        data={this.state.currentMessages}
        renderItem={this.renderMessageItem}
        inverted
        style={[
          styles.messagesContainer,
          {
            marginBottom: bottomMargin,
          },
        ]}
        keyExtractor={this.questionIdExtractor}
      />
    );
  }

  render() {
    const {currentQuestion, invalidAttempts, currentResponse} = this.state;
    return (
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.container}>
        <View style={styles.container}>
          {this.renderAskForHelpModal()}
          <Header title="Marriane Singer" />
          {this.renderMessages()}
          {invalidAttempts > 0 && this.renderTryAgain()}
          {currentQuestion?.paths && (
            <Footer
              onSubmit={this.onResponseSent}
              onTextChange={this.onInputChange}
              textValue={currentResponse}
            />
          )}
        </View>
      </KeyboardAvoidingView>
    );
  }
}

export default ChatBot;
